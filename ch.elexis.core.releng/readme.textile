h1. elexis-3-core/ch.elexis.core.releng

This project contains utilities needed for the release engineering for elexis-3.

h2. Usage

* Very minimal at the time being

h2. Requirements

* Java 7
* Maven 3.0.5 (Maven 3.1 is problematic for the copy-maven-plugin and fails)
* Eclipse Juno (3.8.2)
* Ruby/Rake/Jubula
* A fast way to setup a working development environment for Elexis 3 is documented in the project "bootstrap-elexis-3":https://github.com/ngiger/bootstrap-elexis-3

h2. Building using the Eclipse IDE

* Import all maven project under elexis-3-core
* open ch.elexis.core.releng/juno/juno.target and click on "Set as Target Platform"
* build all projects
* run 


h2. headless build (aka command line)

* @export JAVA_HOME=/opt/java-oracle/jdk1.7.0_25@ # Set your Java home
* @mvn clean install@ # compiles and create packages

For MacOSX you have to add @-Pall-archs@, as I found no way to select only the MacOSX-profile, it always selected linux, too.

This creates directories like @ch.elexis.core.releng/product/target/products/ch.elexis.core.application.product/linux/gtk/x86_64@ where you find the executable @Elexis 3.0@ application.

The directory @ch.elexis.core.releng/product/target/repository/@ contains a simple P2 update-site for Elexis.

To deploy this site have a look at the excellent "Eclipse Tycho - Tutorial for building Eclipse Plugins and RCP applications":http://www.vogella.com/articles/EclipseTycho/article.html#deploy. Or https://github.com/intalio/tycho-p2-scripts/wiki

* it is possible to compile a single project, which can be a lot faster, especially if you are working offline. E.g @cd ch.rgw.utility && mvn clean compile --offline@ takes only about 10 seconds here.

h3. Commonly used maven parameters

@clean install@ cleans and rebuilds everything.

To build a specific build branch (we have snapshot=default, beta, prerelease, release) use e.g @clean install -Drepo_variant=release@. We used the following conventions:

* Repo_variants snapshot and beta use the git-branch master and produce the corresponding P2-Repository-Variant, eg. http://download.elexis.info/Elexis-3.0-Core/beta or  http://download.elexis.info/Elexis-3.0-Core/snapshot
* Repo_variants prerelease and release use the git-branch release and produce the corresponding P2-Repository-Variant, eg. http://download.elexis.info/Elexis-3.0-Core/release or  http://download.elexis.info/Elexis-3.0-Core/prerelease

@-Dmaven.test.skip@ skips tests (if you want to finish faster).

Our maven/tycho infrastructure lets you specifiy @-Dvariant=snapshot@, @-Dvariant=beta@ or @-Dvariant=release@ (Default is snapshot). Result is:
* all timestamps are preseeded by 'a', 'b' or 'r'
* We use "Reproducible Version Qualifiers":http://wiki.eclipse.org/Tycho/Reproducible_Version_Qualifiers to ensure that a new artifact id is generated whenever some of its content gets changed. These qualifier are also use when building a release.

For each of these variant our CI build create composite repositories like @http://download.elexis.info/elexis.3.core/snapshot/@ where you find artifacts named like
@ch.elexis.core_3.0.0.a20140415-1101.jar@ in a directory named
@http://download.elexis.info/elexis.3.core/versions_4_snapshot/3.0.0.a20140515-1927/plugins/@. This mean that the snapshot-directroy was built at on May 15, 2014 at 19:27 PM (20140515-1927) and that the latest change in the plugin @ch.elexis.core@ was done on April 15, 2014 at 11:01 AM (20140415-1101).

In late april 2014 we abondend the (previous implemented) idea to create builds with a specific version.

h2. problems running maven

* We see quite often the error @Failed to execute goal org.eclipse.tycho:tycho-p2-publisher-plugin:0.18.0:publish-products (default-publish-products) on project ch.elexis.core.releng.product: Unable to locate the equinox launcher feature (aka delta-pack)@. It seems that a server (don't know which one) is quite often offline. In this case just call @mvn clean install --offline@ and the build will succeed, if you don't need to download any new dependency.
* How to keep MANIFEST.MF and pom.xml in sync. A "bug report":https://bugs.eclipse.org/bugs/show_bug.cgi?id=387802 recommends running @mvn org.eclipse.tycho:tycho-versions-plugin:update-pom -Dtycho.mode=maven && mvn clean install@

h2. GUI tests

We try to maintain Jubula GUI test for ensuring that common operations work well. For details please consult the "readme.texile":jubual/readme.texile in the jubula directory.

h2. Hints

To rebuild the elexis.ico for Windows use the following bash snippet

bq. convert elexis.xpm -bordercolor white -border 0 \
\( -clone 0 -resize 16x16 -colors 256 \) \( -clone 0 -resize 16x16 \) \
\( -clone 0 -resize 32x32 -colors 256 \) \( -clone 0 -resize 32x32 \) \
\( -clone 0 -resize 48x48 -colors 256 \) \( -clone 0 -resize 48x48 \) \
\( -clone 0 -resize 256x256 \) \
-delete 0 -alpha off elexis.ico

And be aware that for building with Maven the path must be different from the one given in the PDE till the "Eclipse bug 424805":bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=424805 and "361722":https://bugs.eclipse.org/bugs/show_bug.cgi?id=361722 are resolved.

h2. TODO

* Create a tag (but with a good name not @jenkins-Elexis-3.0-Core-18@ and pushing it to github each time, all tests (JUnit, PDE-Test, Jubula) have passed on one/all architecture. The tag name should be something like @I_YEAR_MONTH_DAY_HOUR_MINUTE@, see example "eclipse.e4.tools":http://git.eclipse.org/c/e4/org.eclipse.e4.tools.git/
* Howto build release here some hints
** http://de.slideshare.net/matthiaskoester/release-enginnering-with-tycho-and-p2 (Linux Version 1.0.0 < 1.0.1.snapshot < 1.0.2)
** "OSGi release procedures and best practices":https://issues.sonatype.org/browse/TYCHO-214  
